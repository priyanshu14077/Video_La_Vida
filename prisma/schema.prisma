generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String?
  name      String?
  image     String?
  // For credentials provider, password is required; for OAuth, can be null
  videos    Video[]
  accounts  Account[] // Added missing relation field
  sessions  Session[] // Added missing relation field
  todos     Todo[] // Added missing relation field for Todo
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // Added for NextAuth.js compatibility
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model Video {
  id             Int             @id @default(autoincrement())
  title          String
  description    String
  videoUrl       String
  thumbnailUrl   String
  controls       Boolean         @default(true)
  transformation Transformation?
  userId         Int
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Transformation {
  id      Int    @id @default(autoincrement())
  height  Int    @default(1920)
  width   Int    @default(1080)
  quality Int?   @default(100)
  video   Video? @relation(fields: [videoId], references: [id])
  videoId Int?   @unique
}

model Todo {
  id          Int     @id @default(autoincrement())
  title       String
  description String
  done        Boolean @default(false)
  userId      Int
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade) // Added missing relation field
}
